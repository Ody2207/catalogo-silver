---
import Header from '@/components/Header.astro';
import Producto from '@/components/Producto.astro'
import productos from '../../public/productos.json'

// Define la interfaz del producto
interface Producto {
    nombre: string;
    etiquetas: string[];
    descripcion: string;
    precio: string;
    codigo: string;
	url: string;
}

const productosData: Producto[] = productos;

function convertirEnlaceGoogleDrive(urlCompartida: string): string | null {
    // Regex para extraer el ID de la URL de Google Drive
    const regex = /https:\/\/drive\.google\.com\/file\/d\/([^/]+)\/view/;
    const match = urlCompartida.match(regex);

    if (match && match[1]) {
        const fileId: string = match[1]; // Extrae el ID del archivo
        return `https://drive.google.com/thumbnail?id=${fileId}`;
    } else {
        console.error("La URL proporcionada no es v치lida o no tiene el formato esperado.");
        return null;
    }
}

// Ejemplo de uso:
const urlCompartida: string = "https://drive.google.com/file/d/12345ABC/view?usp=sharing";
const urlDirecta: string | null = convertirEnlaceGoogleDrive(urlCompartida);

if (urlDirecta) {
    console.log("URL directa:", urlDirecta);
} else {
    console.log("No se pudo convertir la URL.");
}

---

<div id="container">
	<Header />
	<main>
		<section>
            {productosData.map((producto) => {
                // Convertir el enlace de imagen si es necesario
                const imagenUrl = convertirEnlaceGoogleDrive(producto.url) || producto.url;

                return (
                    <Producto 
                        nombre={producto.nombre}
                        etiquetas={producto.etiquetas}
                        descripcion={producto.descripcion}
                        precio={producto.precio}
                        codigo={producto.codigo}
                        imagen={imagenUrl} 
                    />
                );
            })}
        </section>
	</main>
</div>

<style>

	main {
		display: flex;
		flex-direction: column;
		justify-content: center;
		align-items: center;
		margin: 2rem 0;
	}
	section {
		display: grid;
		grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
		gap: 2rem 1.5rem;
		width: 70%;
		margin-bottom: 2rem;
	}

	/* Responsive desing */
	@media (max-width: 768px) {
    section {
        	grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); /* Ajustar columnas m치s peque침as */
    	}
	}

	@media (max-width: 480px) {
		section {
			grid-template-columns: 1fr; /* Una sola columna en pantallas muy peque침as */
		}
	}
</style>
